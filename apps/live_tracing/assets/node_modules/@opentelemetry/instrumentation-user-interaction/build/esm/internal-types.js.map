{"version":3,"file":"internal-types.js","sourceRoot":"","sources":["../../src/internal-types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { EventName } from './types';\n\n/**\n * Async Zone task\n */\nexport type AsyncTask = Task & {\n  eventName: EventName;\n  target: EventTarget;\n  // Allows access to the private `_zone` property of a Zone.js Task.\n  _zone: Zone;\n};\n\n/**\n *  Type for patching Zone RunTask function\n */\nexport type RunTaskFunction = (\n  task: AsyncTask,\n  applyThis?: any,\n  applyArgs?: any\n) => Zone;\n\n/**\n * interface to store information in weak map per span\n */\nexport interface SpanData {\n  hrTimeLastTimeout?: HrTime;\n  taskCount: number;\n}\n\n/**\n * interface to be able to check Zone presence on window\n */\nexport interface WindowWithZone {\n  Zone: ZoneTypeWithPrototype;\n}\n\n/**\n * interface to be able to use prototype in Zone\n */\ninterface ZonePrototype {\n  prototype: any;\n}\n\n/**\n * type to be  able to use prototype on Zone\n */\nexport type ZoneTypeWithPrototype = ZonePrototype & Zone;\n"]}