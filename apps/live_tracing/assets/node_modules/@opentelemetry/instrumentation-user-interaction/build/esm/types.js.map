{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n\nexport type EventName = keyof HTMLElementEventMap;\n\nexport type ShouldPreventSpanCreation = (\n  eventType: EventName,\n  element: HTMLElement,\n  span: Span\n) => boolean | void;\n\nexport interface UserInteractionInstrumentationConfig\n  extends InstrumentationConfig {\n  /**\n   * List of events to instrument (like 'mousedown', 'touchend', 'play' etc).\n   * By default only 'click' event is instrumented.\n   */\n  eventNames?: EventName[];\n\n  /**\n   * Callback function called each time new span is being created.\n   * Return `true` to prevent span recording.\n   * You can also use this handler to enhance created span with extra attributes.\n   */\n  shouldPreventSpanCreation?: ShouldPreventSpanCreation;\n}\n"]}