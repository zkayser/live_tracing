{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAGH,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EACL,MAAM,EAGN,sBAAsB,IAAI,GAAG,GAC9B,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAEhD,MAAM,CAAC,IAAM,+BAA+B,GAAG;;IAC7C,IAAM,OAAO,GAAuB,EAAE,CAAC;IACvC,IAAM,2BAA2B,GAAG,MAAA,MAClC,aACD,EAAC,gBAAgB,mDAAG,YAAY,EAAE,CAAC,CAAuB,CAAC;IAE5D,IAAI,2BAA2B,EAAE;QAC/B,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAW;YACvB,IAAI,MAAM,CAAC,2BAA2B,EAAE,GAAG,CAAC,EAAE;gBAC5C,IAAM,KAAK,GAAG,2BAA2B,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBACtB;aACF;QACH,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,kCAAkC;QAClC,IAAM,IAAI,GAA6C,aAAa,CAAC;QACrE,IAAM,mBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;QACtC,IAAI,mBAAiB,EAAE;YACrB,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAW;gBACvB,IAAI,MAAM,CAAC,mBAAiB,EAAE,GAAG,CAAC,EAAE;oBAClC,IAAM,KAAK,GAAG,mBAAiB,CAAC,GAAG,CAAC,CAAC;oBACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;wBAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;qBACtB;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,IAAM,qBAAqB,GAAG;IAC5B,aAAa,EAAE,UAAU,CAAC,WAAW;IACrC,wBAAwB,EAAE,UAAU,CAAC,sBAAsB;CAC5D,CAAC;AAEF,MAAM,CAAC,IAAM,6BAA6B,GAAG,UAAC,IAAU;;IACtD,IAAM,sBAAsB,GAAG,MAAA,MAC7B,aACD,EAAC,gBAAgB,mDAAG,OAAO,CAAC,CAAC;IAC9B,IAAI,sBAAsB,EAAE;QAC1B,sBAAsB,CAAC,OAAO,CAAC,UAAC,EAAmB;gBAAjB,IAAI,UAAA,EAAE,SAAS,eAAA;YAC/C,IAAI,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAAC,EAAE;gBACvC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;aACvD;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span } from '@opentelemetry/api';\nimport { otperformance } from '@opentelemetry/core';\nimport {\n  hasKey,\n  PerformanceEntries,\n  PerformanceLegacy,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\n\nexport const getPerformanceNavigationEntries = (): PerformanceEntries => {\n  const entries: PerformanceEntries = {};\n  const performanceNavigationTiming = (\n    otperformance as unknown as Performance\n  ).getEntriesByType?.('navigation')[0] as PerformanceEntries;\n\n  if (performanceNavigationTiming) {\n    const keys = Object.values(PTN);\n    keys.forEach((key: string) => {\n      if (hasKey(performanceNavigationTiming, key)) {\n        const value = performanceNavigationTiming[key];\n        if (typeof value === 'number') {\n          entries[key] = value;\n        }\n      }\n    });\n  } else {\n    // // fallback to previous version\n    const perf: typeof otperformance & PerformanceLegacy = otperformance;\n    const performanceTiming = perf.timing;\n    if (performanceTiming) {\n      const keys = Object.values(PTN);\n      keys.forEach((key: string) => {\n        if (hasKey(performanceTiming, key)) {\n          const value = performanceTiming[key];\n          if (typeof value === 'number') {\n            entries[key] = value;\n          }\n        }\n      });\n    }\n  }\n\n  return entries;\n};\n\nconst performancePaintNames = {\n  'first-paint': EventNames.FIRST_PAINT,\n  'first-contentful-paint': EventNames.FIRST_CONTENTFUL_PAINT,\n};\n\nexport const addSpanPerformancePaintEvents = (span: Span) => {\n  const performancePaintTiming = (\n    otperformance as unknown as Performance\n  ).getEntriesByType?.('paint');\n  if (performancePaintTiming) {\n    performancePaintTiming.forEach(({ name, startTime }) => {\n      if (hasKey(performancePaintNames, name)) {\n        span.addEvent(performancePaintNames[name], startTime);\n      }\n    });\n  }\n};\n"]}