{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  propagation,\n  trace,\n  Span,\n  ROOT_CONTEXT,\n} from '@opentelemetry/api';\nimport { otperformance, TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport {\n  addSpanNetworkEvent,\n  addSpanNetworkEvents,\n  hasKey,\n  PerformanceEntries,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport {\n  InstrumentationBase,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  DocumentLoadCustomAttributeFunction,\n  DocumentLoadInstrumentationConfig,\n  ResourceFetchCustomAttributeFunction,\n} from './types';\nimport { AttributeNames } from './enums/AttributeNames';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport {\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_USER_AGENT,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  addSpanPerformancePaintEvents,\n  getPerformanceNavigationEntries,\n} from './utils';\n\n/**\n * This class represents a document load plugin\n */\nexport class DocumentLoadInstrumentation extends InstrumentationBase<DocumentLoadInstrumentationConfig> {\n  readonly component: string = 'document-load';\n  readonly version: string = '1';\n  moduleName = this.component;\n\n  constructor(config: DocumentLoadInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {}\n\n  /**\n   * callback to be executed when page is loaded\n   */\n  private _onDocumentLoaded() {\n    // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n    // Support for event \"loadend\" is very limited and cannot be used\n    window.setTimeout(() => {\n      this._collectPerformance();\n    });\n  }\n\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  private _addResourcesSpans(rootSpan: Span): void {\n    const resources: PerformanceResourceTiming[] = (\n      otperformance as unknown as Performance\n    ).getEntriesByType?.('resource') as PerformanceResourceTiming[];\n    if (resources) {\n      resources.forEach(resource => {\n        this._initResourceSpan(resource, rootSpan);\n      });\n    }\n  }\n\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  private _collectPerformance() {\n    const metaElement = Array.from(document.getElementsByTagName('meta')).find(\n      e => e.getAttribute('name') === TRACE_PARENT_HEADER\n    );\n    const entries = getPerformanceNavigationEntries();\n    const traceparent = (metaElement && metaElement.content) || '';\n    context.with(propagation.extract(ROOT_CONTEXT, { traceparent }), () => {\n      const rootSpan = this._startSpan(\n        AttributeNames.DOCUMENT_LOAD,\n        PTN.FETCH_START,\n        entries\n      );\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), () => {\n        const fetchSpan = this._startSpan(\n          AttributeNames.DOCUMENT_FETCH,\n          PTN.FETCH_START,\n          entries\n        );\n        if (fetchSpan) {\n          fetchSpan.setAttribute(SEMATTRS_HTTP_URL, location.href);\n          context.with(trace.setSpan(context.active(), fetchSpan), () => {\n            if (!this.getConfig().ignoreNetworkEvents) {\n              addSpanNetworkEvents(fetchSpan, entries);\n            }\n            this._addCustomAttributesOnSpan(\n              fetchSpan,\n              this.getConfig().applyCustomAttributesOnSpan?.documentFetch\n            );\n            this._endSpan(fetchSpan, PTN.RESPONSE_END, entries);\n          });\n        }\n      });\n\n      rootSpan.setAttribute(SEMATTRS_HTTP_URL, location.href);\n      rootSpan.setAttribute(SEMATTRS_HTTP_USER_AGENT, navigator.userAgent);\n\n      this._addResourcesSpans(rootSpan);\n\n      if (!this.getConfig().ignoreNetworkEvents) {\n        addSpanNetworkEvent(rootSpan, PTN.FETCH_START, entries);\n        addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_START, entries);\n        addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_END, entries);\n        addSpanNetworkEvent(rootSpan, PTN.DOM_INTERACTIVE, entries);\n        addSpanNetworkEvent(\n          rootSpan,\n          PTN.DOM_CONTENT_LOADED_EVENT_START,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PTN.DOM_CONTENT_LOADED_EVENT_END,\n          entries\n        );\n        addSpanNetworkEvent(rootSpan, PTN.DOM_COMPLETE, entries);\n        addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_START, entries);\n        addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_END, entries);\n      }\n\n      if (!this.getConfig().ignorePerformancePaintEvents) {\n        addSpanPerformancePaintEvents(rootSpan);\n      }\n\n      this._addCustomAttributesOnSpan(\n        rootSpan,\n        this.getConfig().applyCustomAttributesOnSpan?.documentLoad\n      );\n      this._endSpan(rootSpan, PTN.LOAD_EVENT_END, entries);\n    });\n  }\n\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  private _endSpan(\n    span: Span | undefined,\n    performanceName: string,\n    entries: PerformanceEntries\n  ) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (hasKey(entries, performanceName)) {\n        span.end(entries[performanceName]);\n      } else {\n        // just end span\n        span.end();\n      }\n    }\n  }\n\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  private _initResourceSpan(\n    resource: PerformanceResourceTiming,\n    parentSpan: Span\n  ) {\n    const span = this._startSpan(\n      AttributeNames.RESOURCE_FETCH,\n      PTN.FETCH_START,\n      resource,\n      parentSpan\n    );\n    if (span) {\n      span.setAttribute(SEMATTRS_HTTP_URL, resource.name);\n      if (!this.getConfig().ignoreNetworkEvents) {\n        addSpanNetworkEvents(span, resource);\n      }\n      this._addCustomAttributesOnResourceSpan(\n        span,\n        resource,\n        this.getConfig().applyCustomAttributesOnSpan?.resourceFetch\n      );\n      this._endSpan(span, PTN.RESPONSE_END, resource);\n    }\n  }\n\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  private _startSpan(\n    spanName: string,\n    performanceName: string,\n    entries: PerformanceEntries,\n    parentSpan?: Span\n  ): Span | undefined {\n    if (\n      hasKey(entries, performanceName) &&\n      typeof entries[performanceName] === 'number'\n    ) {\n      const span = this.tracer.startSpan(\n        spanName,\n        {\n          startTime: entries[performanceName],\n        },\n        parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined\n      );\n      return span;\n    }\n    return undefined;\n  }\n\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  private _waitForPageLoad() {\n    if (window.document.readyState === 'complete') {\n      this._onDocumentLoaded();\n    } else {\n      this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  }\n\n  /**\n   * adds custom attributes to root span if configured\n   */\n  private _addCustomAttributesOnSpan(\n    span: Span,\n    applyCustomAttributesOnSpan: DocumentLoadCustomAttributeFunction | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * adds custom attributes to span if configured\n   */\n  private _addCustomAttributesOnResourceSpan(\n    span: Span,\n    resource: PerformanceResourceTiming,\n    applyCustomAttributesOnSpan:\n      | ResourceFetchCustomAttributeFunction\n      | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span, resource),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnResourceSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable() {\n    // remove previously attached load to avoid adding the same event twice\n    // in case of multiple enable calling.\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  }\n\n  /**\n   * implements disable function\n   */\n  override disable() {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  }\n}\n"]}